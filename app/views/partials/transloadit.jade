.container
    h1 Transloadit Demo
    form#upload-form(action='?upload=complete', enctype='multipart/form-data', method='POST')
      input(type='file', name='my_file', multiple='multiple')

    //-     <form method="post" enctype="multipart/form-data" action="/upload">
    //-     <input type="file" name="file">
    //-     <input type="submit" value="Submit">
    //- </form>
    a(ng-click="upload('http://i.imgur.com/HaKzuYU.jpg')") upload
    pre {{signature}}

    .ng-v
      | Angular Version:
      input(type='text', ng-model='angularVersion')
      input(type='button', data-ng-click='changeAngularVersion()', value='Go')
    h1 Angular file upload Demo
    h3
      | Visit
      a(href='https://github.com/danialfarid/angular-file-upload') angular-file-upload
      | on github
    .upload-div
      | http method:
      input(type='radio', ng-model='httpMethod', ng-init='httpMethod = \'POST\'', value='POST')
      | post
      input(type='radio', ng-model='httpMethod', value='PUT')
      | put
      br
      br
      | How to upload:
      br
      label
        input(type='radio', name='howToSend', ng-model='howToSend', value='1', ng-init='howToSend = 1')
        | Multupart/form-data upload using $upload.upload() service cross browser
      br
      label
        input(type='radio', name='howToSend', ng-model='howToSend', value='2', ng-disabled='!dropSupported')
        | File binary content with the file type as Content-Type header using $upload.http() service
      .sub
        | The second option could be used to upload files to
        a(href='https://github.com/danialfarid/angular-file-upload/issues/88') CouchDB
        | ,
        a(href='https://github.com/danialfarid/angular-file-upload/issues/87') imgur
        | , etc... for HTML5 FileReader browsers.
        br
        | Option 2 cross browser FileReader and image preview will be added around Feb 2014 when FileAPI FileReader support is available.
        br
      br
      | myModel:
      input(type='text', ng-model='myModel')
      | model object to be sent with the file.
      br
      | choose a single file:
      input(type='file', ng-file-select='onFileSelect($files)')
      br
      | or multiple files:
      input(type='file', ng-file-select='onFileSelect($files)', multiple='multiple')
      br
      br
      .drop-box(ng-show='dropSupported', ng-file-drop='onFileSelect($files);', ng-file-drop-available='dropSupported=true') or drop files here
      div(ng-show='!dropSupported') HTML5 Drop File is not supported on this browser
      br
      input(type='checkbox', ng-model='uploadRightAway')
      | Upload right away
      br
      br
      | Progress:
      br
      br
      div(ng-show='selectedFiles != null')
        .sel-file(ng-repeat='f in selectedFiles')
          img(ng-show='dataUrls[$index]', ng-src='{{dataUrls[$index]}}')
          button.button(ng-click='start($index)', ng-show='ng-show')
          span.progress(ng-show='ng-show')
            | = 0"
            div {{progress[$index]}}%
          button.button(ng-click='abort($index)', ng-show='ng-show')
          | {{f.name}} - size: {{f.size}}B - type: {{f.type}}
      .response(ng-show='ng-show', uploadresult.length='uploadResult.length')
        | 0"
        | Server Response:
        ul
          li(ng-repeat='result in uploadResult')
            ul
              li(ng-repeat='item in result')
                div(data-ng-show='item.name') file name: {{item.name}}
                div(data-ng-show='item.fieldName') name: {{item.fieldName}}
                div(data-ng-show='item.size') size on the serve: {{item.size}}
                div(data-ng-show='item.value') value: {{item.value}}
    div(style='position: absolute; bottom: 10px; right: 10px; font-size: smaller; color: #777;') Last update: 2013-12-30

    //-   //
    //-      This is your upload form 
    //- //
    //-    We need to include jQuery to make the Transloadit jQuery plugin work 
    //- script(src='//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js')
    //- //
    //-    We include the Transloadit jQuery plugin here 
    //- script(src='//assets.transloadit.com/js/jquery.transloadit2-v2-latest.js')
    //- //
    //-    We initialize the Transloadit plugin here 
    //- script(type='text/javascript')
    //-   $(function() {
    //-   // We reference our html form here
    //-   $('#upload-form').transloadit({
    //-   // We want to wait for all encodings to finish before the form
    //-   // is submitted.
    //-   wait: true,
    //-   // The upload to Transloadit should start as soon as the user
    //-   // selects some files.
    //-   triggerUploadOnFileSelection: true,
    //-   params: {
    //-   auth: {
    //-   // This is your API key.
    //-   key: "2629128085a911e3b3e3a539a6199a02"
    //-   },
    //-   // Our assembly instructions just contain two steps for now.
    //-   // You can name the steps how you like.
    //-   steps: {
    //-   // The first step resizes the uploaded image(s) to 125x125 pixels.
    //-   // The /image/resize robots ignores any files that are not images
    //-   // automatically.
    //-   resize_to_125: {
    //-   robot: "/image/resize",
    //-   use: ":original",
    //-   width: 125,
    //-   height: 125
    //-   },
    //-   // The second step resizes the results further to 75x75 pixels.
    //-   // Notice how we "use" the output files of the "resize_to_125"
    //-   // step as our input here. We could use all kinds of steps with
    //-   // various robots that "use" each other, making this perfect for
    //-   // any workflow.
    //-   resize_to_75: {
    //-   robot: "/image/resize",
    //-   use: "resize_to_125",
    //-   width: 75,
    //-   height: 75,
    //-   // We also add a sepia effect here just for fun.
    //-   // The /image/resize robot has a ton of available parameters.
    //-   sepia: 80
    //-   }
    //-   }
    //-   }
    //-   });
    //-   });
